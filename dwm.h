typedef struct FontDef FontDef;
typedef struct Layout Layout;
typedef struct Rule Rule;
typedef union  Arg Arg;
typedef struct Key Key;
typedef struct Button Button;
typedef struct StatusClick StatusClick;
typedef struct Pertag Pertag;
typedef struct BarState BarState;
typedef struct ButtonPos ButtonPos;
typedef struct Monitor Monitor;
typedef struct Client Client;
typedef struct Systray Systray;
typedef struct ClickEv ClickEv;
typedef struct XFont XFont;
typedef struct UTF8Cache UTF8Cache;
typedef struct UnicodeBlockDef UnicodeBlockDef;

static void checkotherwm(void);
static void setup(void);
static void scan(void);
static void run(void);
static void maprequest(XEvent *e);
static void destroynotify(XEvent *e);
static void unmapnotify(XEvent *e);
static void enternotify(XEvent *e);
static void leavenotify(XEvent *e);
static void motionnotify(XEvent *e);
static void configurenotify(XEvent *e);
static void configurerequest(XEvent *e);
static void propertynotify(XEvent *e);
static void clientmessage(XEvent *e);
static void keypress(XEvent *e);
static void expose(XEvent *e);
static void focusin(XEvent *e);
static void resizerequest(XEvent *e);
static void mappingnotify(XEvent *e);
static void manage(Window w, XWindowAttributes wa);
static void unmanage(Client *c, int destroyed);
static void cleanup(void);
static void cleanupmon(Monitor *mon);
static int swallow(Client *c);
static void unswallow(Client *c, int destroyed, int reattach);
static void unmanageswallowed(Client *c);
static void ignoreenter(Window w);
static int isenterignored(Window w);
static void tagreduced(Client *c, int unmanage, unsigned int newtags);
static int updatemons(void);
#ifdef XINERAMA
static int isxsiunique(XineramaScreenInfo xsi, XineramaScreenInfo *list, size_t nlist);
static int isnewmon(Monitor *m, XineramaScreenInfo xsi);
#endif /* XINERAMA */
static void updatestatusmonptr(void);
static Monitor *createmon(void);
static void applyrules(Client *c);
static void focus(Client *c);
static void focusmon(Monitor *m);
static void focusinput(Client *c);
static void arrange(Monitor *m);
static void showhide(Client *c);
static void restack(Monitor *m);
static void resize(Client *c, int x, int y, int w, int h, int interact);
static void resizeclient(Client *c, int x, int y, int w, int h);
static void sendconfigurenotify(Client *c);
static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
static void updatesizehints(Client *c);
static void loadclienttagsandmon(Client *c);
static void loadmonsettings(void);
static void updateclass(Client *c);
static void updatetitle(Client *c);
static void updatewindowtype(Client *c);
static void updatewmhints(Client *c);
static void appendtoclientlist(Window w);
static void updateclientlist(void);
static void updateclientdesktop(Client *c);
static void updatecurrentdesktop(void);
static void updatedesktops(void);
static void updatewinbutton(Client *c);
static void updatebarwin(Monitor *m);
static void updatestatustext(void);
static void drawbar(Monitor *m);
static int barunchanged(Monitor *m);
static void buttonpress(XEvent *e);
static void handlestatusclick(Monitor *m, XButtonPressedEvent *ev);
static int drawstatus(Monitor *m);
static int isseparator(char c);
static void drawborder(Window w, int scm);
static void updateborder(Client *c);
static void systrayupdate(void);
static void systrayaddicon(Window w);
static void systrayupdateicon(Client *c, XResizeRequestEvent *resize);
static void systrayremoveicon(Client *c);
static int systrayinit(void);
static void systraycleanup(void);
static unsigned int getwinpid(Window w);
static Client *getparentterminal(Client *c);
static int isdescprocess(unsigned int parent, unsigned int child);
static unsigned int getparentpid(unsigned int pid);
static void pertagload(Monitor *m, unsigned int tags, unsigned int newtags);
static void pertagpush(Monitor *m, unsigned int newtags);
static void pertagpop(Monitor *m);
static Client *wintoclient(Window w);
static Client *origwintoclient(Window w);
static Client *winbuttontoclient(Window w);
static Client *wintosystrayicon(Window w);
static Monitor *wintomon(Window w);
static Monitor *recttomon(int x, int y, int w, int h);
static Monitor *dirtomon(int dir);
static void focusstack(const Arg *arg);
static void focusstacktile(const Arg *arg);
static void cycleview(const Arg *arg);
static void view(const Arg *arg);
static void toggleview(const Arg *arg);
static void tag(const Arg *arg);
static void toggletag(const Arg *arg);
static void viewmon(const Arg *arg);
static void tagmon(const Arg *arg);
static void setclientmon(Client *c, Monitor *m);
static void push(const Arg *arg);
static void switchcol(const Arg *arg);
static void togglefloating(const Arg *arg);
static void togglefullscreen(const Arg *arg);
static void setlayout(const Arg *arg);
static void setmfact(const Arg *arg);
static void incnmaster(const Arg *arg);
static void killclient(const Arg *arg);
static void togglebar(const Arg *arg);
static void zoom(const Arg *arg);
static void transfer(const Arg *arg);
static void spawn(const Arg *arg);
static void quit(const Arg *arg) __attribute__((unused));
static void restart(const Arg *arg);
static void sigrestart(int unused);
#ifdef BACKTRACE
static void sigbacktrace(int sig);
#endif /* BACKTRACE */
static void sigchld(int unused);
static void movemouse(const Arg *arg);
static void resizemouse(const Arg *arg);
static void setfullscreen(Client *c, int fullscreen);
static void grabbuttons(Client *c, int focused);
static void attach(Client *c);
static void attachabove(Client *c) __attribute__((unused));
static void attachbelow(Client *c) __attribute__((unused));
static void attachtop(Client *c) __attribute__((unused));
static void attachbottom(Client *c) __attribute__((unused));
static void attachstack(Client *c);
static void attachstackbottom(Client *c);
static void detach(Client *c);
static void detachstack(Client *c);
static void grabkeys(void);
static void updatenumlockmask(void);
static void setcardprop(Window w, Atom prop, long value);
static void setatomprop(Window w, Atom prop, Atom value);
static void setwinprop(Window w, Atom prop, Window value);
static void setfullscreenprop(Window w, int fullscreen);
static void setwindowstate(Window w, long state);
static int getcardprop(Window w, Atom prop, long *ret);
static Atom getatomprop(Window w, Atom prop);
static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
static int getxembedinfoprop(Window w, unsigned int *version, unsigned int *flags);
static long getstate(Window w);
static int gettransientfor(Window w, Client **transfor);
static int getrootptr(int *x, int *y);
static int ismapped(Window w);
static void setclientstate(Client *c, long state);
static int sendevent(Client *c, Atom proto);
static void sendeventraw(Window w, Atom proto, int mask, long d0, long d1, long d2, long d3, long d4);
static void sendxembedevent(Window w, long message, long detail, long data1, long data2);
static void seturgent(Client *c, int urg);
static void tile(Monitor *m);
static void monocle(Monitor *m);
static void stairs(Monitor *m);
static int afloat(Client *c);
static unsigned int gettagnum(unsigned int tags);
static int numtiledontag(Client *c);
static int ismasterontag(Client *c);
static Client *nexttiledloop(Client *c);
static Client *prevtiledloop(Client *c);
static Client *nexttiled(Client *c);
static Client *nexttiledontag(Client *c) __attribute__((unused));
static Client *nexttiledcore(Client *c, unsigned int tags);
static Client *prevtiled(Client *c);
static Client *lasttiled(Monitor *m);
static void fribidi(char *dest, char *src, size_t size);
static int xerror(Display *dpy, XErrorEvent *ee);
static int xerrorstart(Display *dpy, XErrorEvent *ee);
static int xerrordummy(Display *dpy, XErrorEvent *ee) __attribute__((unused));
static Window createsimplewin(void);
static void renderinit(void);
static void renderfree(void);
static void renderfreefonts(XFont *font);
static void renderupdatesize(void);
static void rendermap(Monitor *m, int w, int dest_x);
static void renderrect(int scheme, int x, int y, int w, int h, int filled, int invert);
static int rendergettextwidth(const char *string) __attribute__((unused));
static int rendertext(int scheme, const char *string, int x, int y, int w, int h, int pad, int invert);
static void getfirstcharinfo(const char *string, XFont **font, unsigned int *size, int *width);
static XFont *getcharfont(unsigned long codepoint);
static int getcharwidth(XFont *font, const char *string, unsigned int size);
static XFont *createfont(const char *fontname, FcPattern *fontpattern);
static void freefont(XFont *font);
static void utf8decodefirst(const char *string, unsigned long *codepoint_ret, unsigned int *size_ret);
static void utf8decode(unsigned long *state, unsigned char byte, unsigned long *codepoint_ret);
static void strscpy(char *dest, const char *src, size_t size);
static void strsscpy(char *dest, const char *src, size_t destsize, size_t srcsize);
static void *ecalloc(size_t nmemb, size_t size);
static void die(const char *fmt, ...);
